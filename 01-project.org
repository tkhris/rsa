** Password Strength Security
  #+BEGIN_SRC elisp :results silent
    (defun digitp (p)
      ;(setq  p)
      (and (> (aref p 0) 47) (< (aref p 0) 58)))
#+END_SRC

#+BEGIN_SRC elisp :results silent
  (defun specialp (p)
    (setq cSpecial (aref p 0))
    (or (= cSpecial 33) (= cSpecial 95) (and (> cSpecial 34) (<
    cSpecial 46)) (and (> cSpecial 59) (< cSpecial 65))))
#+END_SRC

#+BEGIN_SRC elisp :results silent
  (defun upperp (p)
     (if (or (digitp p) (specialp p))
        nil
    (setq upper (upcase p))
     (string-equal upper p)))
#+END_SRC

#+BEGIN_SRC elisp :results silent
  (defun lowerp (p)
    (if (or (digitp p) (specialp p))
        nil
     (setq lower (downcase p))
     (string-equal lower p)))
#+END_SRC

#+BEGIN_SRC elisp :results silent
  (defun passCheck (p)
    (setq low 0)
    (setq up 0)
    (setq digit 0)
    (setq symb 0)
    (setq count 0)
    (setq checksPerSec 588235)
    (while (< count (length p))
      (setq c (substring p count (+ count 1)))
      (if (lowerp c ) (setq low 26)
        (if (upperp c) (setq up 26)
          (if (digitp c) (setq digit 10) (setq symb 18))))
      (incf count))
    (setq totalUniqueSymbols (+ low up digit symb))
    (princ "# total unqiue symbols: ")
    (print totalUniqueSymbols)
    (setq pLength (length p))
    (princ "Length of password: ")
    (print pLength)
    (setq numPermutations (expt totalUniqueSymbols pLength))
    (princ "# permutations with symbols in password: ")
    (print numPermutations)
    (setq secondsToCrack (/ numPermutations checksPerSec))
    (setq halfSeconds (/ secondsToCrack 2))
    (setq secPerYear (* 525600 60))
    (setq years (/ secondsToCrack secPerYear))
    (if (< years 1) "Very weak password"
      (if (< years 25) "Weak password"
        (if (< years 50) "Average password"
          (if (< years 75) "Strong password" "Very Strong Password")))))
#+END_SRC

#+BEGIN_SRC elisp :results output
(print(passCheck "je[9,%hHq|Lb|M"))
#+END_SRC
 
** Ceaser Cipher
#+BEGIN_SRC elisp
(require 'cl)
(defun ceaserEncrypt(key phrase)
   (map 'string (lambda (c) (+ (% (+ (- c 97) key) 26) 97)) phrase))
(defun ceaserDecrypt(key phrase)
   (map 'string (lambda (c) (+ (% (+ (- c 97) (- 26 key)) 26) 97)) phrase))
#+END_SRC

#+RESULTS:
: ceaserDecrypt

#+BEGIN_SRC elisp :results all
(setq key 2)
(setq phrase "aomethinz")
(setq encrypted (ceaserEncrypt key phrase))
(setq decrypted (ceaserDecrypt key encrypted))
(format "   Phrase: %s\nEncrypted: %s\nDecrypted: %s" phrase encrypted decrypted)
#+END_SRC

#+RESULTS:
:    Phrase: aomethinz
: Encrypted: cqogvjkpb
: Decrypted: aomethinz

** Vigenere Cipher
#+BEGIN_SRC elisp
  (defun vigenereEncrypt(key phrase)
    (let ((len (length key))
          (index -1))
      (map 'string (lambda (c)
                     (+ (% (+ (- c ?a)
                              (- (elt key (setq index (mod (1+ index) len))) ?a)) 26) ?a))
           phrase)))
  ;(defun vigenereDecrypt(key phrase)
  ;   ())
#+END_SRC

#+RESULTS:
: vigenereEncrypt

#+BEGIN_SRC elisp :results code
;(setq key "lemon")
;(setq phrase "attackatdawn")
;(setq encrypted (vigenereEncrypt key phrase))
(vigenereEncrypt "lemon" "attackatdawn") 
#+END_SRC

#+RESULTS:
#+BEGIN_SRC elisp
"lxfopvefrnhr"
#+END_SRC
lxfopvefrnhr



** RSA Therory Cipher
